(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{395:function(e,t,a){e.exports=a.p+"assets/img/replica-set-primary-with-two-secondaries.bakedsvg.71ff1fec.svg"},396:function(e,t,a){e.exports=a.p+"assets/img/replica-set-trigger-election.bakedsvg.a65dbacf.svg"},484:function(e,t,a){"use strict";a.r(t);var o=a(45),n=Object(o.a)({},(function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[o("header-table"),e._v(" "),o("h1",{attrs:{id:"page-frontmatter-title"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#page-frontmatter-title"}},[e._v("#")]),e._v(" "+e._s(e.$page.frontmatter.title))]),e._v(" "),o("h2",{attrs:{id:"今日のサンプル環境"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#今日のサンプル環境"}},[e._v("#")]),e._v(" 今日のサンプル環境")]),e._v(" "),o("p",[e._v("以下のレポジトリを手元にクローンして、"),o("code",[e._v("docker-compose up -d")]),e._v("を実行してください。")]),e._v(" "),o("p",[o("a",{attrs:{href:"https://github.com/iij/bootcamp-mongodb-sample",target:"_blank",rel:"noopener noreferrer"}},[e._v("iij/bootcamp-mongodb-sample"),o("OutboundLink")],1)]),e._v(" "),o("div",{staticClass:"language-terminal extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("$ git clone git@github.com:iij/bootcamp-mongodb-sample.git\n$ docker-compose up -d\nDocker Compose is now in the Docker CLI, try `docker compose up`\n\nPulling mongo-primary (mongo:)...\nlatest: Pulling from library/mongo\n16ec32c2132b: Pull complete\n6335cf672677: Pull complete\ncbc70ccc8ebe: Pull complete\n0d1a3c6bd417: Pull complete\n960f3b9b27d3: Pull complete\naff995a136b4: Pull complete\n4249be7550a8: Pull complete\n4da411c5a406: Pull complete\n4b9c6ac629be: Pull complete\n4de7437f497e: Pull complete\nDigest: sha256:d78c7ace6822297a7e1c7076eb9a7560a81a6ef856ab8d9cde5d18438ca9e8bf\nStatus: Downloaded newer image for mongo:latest\nCreating bootcamp-mongodb-sample_mongo-arbiter_1   ... done\nCreating bootcamp-mongodb-sample_mongo-secondary_1 ... done\nCreating bootcamp-mongodb-sample_mongo-primary_1   ... done\n$ docker-compose ps\n                 Name                               Command               State                   Ports\n-----------------------------------------------------------------------------------------------------------------------\nbootcamp-mongodb-sample_mongo-           docker-entrypoint.sh mongo ...   Up      27017/tcp, 0.0.0.0:27019->27019/tcp,:\narbiter_1                                                                         ::27019->27019/tcp\nbootcamp-mongodb-sample_mongo-           docker-entrypoint.sh mongo ...   Up      0.0.0.0:27017->27017/tcp,:::27017->27\nprimary_1                                                                         017/tcp\nbootcamp-mongodb-sample_mongo-           docker-entrypoint.sh mongo ...   Up      27017/tcp, 0.0.0.0:27018->27018/tcp,:\nsecondary_1                                                                       ::27018->27018/tcp\n")])])]),o("h2",{attrs:{id:"mongodbの紹介"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#mongodbの紹介"}},[e._v("#")]),e._v(" MongoDBの紹介")]),e._v(" "),o("p",[o("a",{attrs:{href:"https://www.mongodb.com/",target:"_blank",rel:"noopener noreferrer"}},[e._v("MongoDB"),o("OutboundLink")],1),e._v("は2009年に初版がリリースされた、MongoDB社が開発しているドキュメント指向のデータベース。\nMySQLなどのRDBが「行と列」からなるテーブル形式でデータを管理するのに対して、ドキュメント指向であるMongoDBには以下のjsonデータのようなオブジェクトをそのまま保存・検索ができるデータベースです。")]),e._v(" "),o("div",{staticClass:"language-json extra-class"},[o("pre",{pre:!0,attrs:{class:"language-json"}},[o("code",[o("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    "),o("span",{pre:!0,attrs:{class:"token property"}},[e._v('"username"')]),e._v(" "),o("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),o("span",{pre:!0,attrs:{class:"token string"}},[e._v('"bob"')]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n    "),o("span",{pre:!0,attrs:{class:"token property"}},[e._v('"address"')]),e._v(" "),o("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),o("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n        "),o("span",{pre:!0,attrs:{class:"token property"}},[e._v('"street"')]),e._v(" "),o("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),o("span",{pre:!0,attrs:{class:"token string"}},[e._v('"123 Main Street"')]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n        "),o("span",{pre:!0,attrs:{class:"token property"}},[e._v('"city"')]),e._v(" "),o("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),o("span",{pre:!0,attrs:{class:"token string"}},[e._v('"Springfield"')]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n        "),o("span",{pre:!0,attrs:{class:"token property"}},[e._v('"state"')]),e._v(" "),o("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),o("span",{pre:!0,attrs:{class:"token string"}},[e._v('"NY"')]),e._v("\n    "),o("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n"),o("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])]),o("p",[e._v("いわゆる「NoSQL」としてRDBMSに比べて大量のデータを柔軟に保存し、複雑な検索クエリで比較的高速に検索・集計することができます。\nさらにレプリケーションやインデックス、ドキュメント単位のロックなどRDBMSと同じような機能を持つため、スキーマレス（テーブル定義を事前に決めなくてもいい）でありながらRDBMSのような使い方ができます。")]),e._v(" "),o("p",[e._v("他の特徴として、「レプリカセット」と呼ばれる仕組みで3台（奇数台）1セットの冗長構成を簡単に作れる他、シャーディングによる負荷分散構成も簡単に構築することができます。")]),e._v(" "),o("h3",{attrs:{id:"個人的な雑感"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#個人的な雑感"}},[e._v("#")]),e._v(" 個人的な雑感")]),e._v(" "),o("p",[e._v("MongoDBはスキーマレスでありながらRDBMSのような使い方もできることから、サービス立ち上げ時に開発スピードが求められる段階において、データスキーマを含めて試行錯誤を高速に繰り返すような使われ方が話題になりました。\nアプリケーションの開発手法としての有効性はともかく、MongoDBが「とりあえずデータを突っ込んで高速に検索する」用途において非常に強力なDBであることは間違いありません。")]),e._v(" "),o("ul",[o("li",[e._v("きちんとスキーマと検索クエリが設計されたRDBMS")]),e._v(" "),o("li",[e._v("大量データの保存・検索に特化したNoSQL")]),e._v(" "),o("li",[e._v("全文検索に特化したエンジン")])]),e._v(" "),o("p",[e._v("などユースケースに完全に特化した他のDBにパフォーマンスが及ばなくても、ほぼあらゆるユースケースで満足のいくパフォーマンスを出せるDBという存在がMongoDBの立ち位置だと思います。\n（レプリカセットによる冗長化とシャーディングの負荷分散も含めて）")]),e._v(" "),o("h2",{attrs:{id:"早速使ってみよう"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#早速使ってみよう"}},[e._v("#")]),e._v(" 早速使ってみよう")]),e._v(" "),o("p",[e._v("何はともあれ使ってみましょう。"),o("code",[e._v("docker-compose up -d")]),e._v("に成功していれば、以下のコマンドでMongoDBのコンソールが使えます。")]),e._v(" "),o("div",{staticClass:"language-terminal extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v('$ docker-compose exec mongo-arbiter mongo --port 27017 --host mongo-primary\n\nMongoDB shell version v5.0.1\nconnecting to: mongodb://mongo-primary:27017/?compressors=disabled&gssapiServiceName=mongodb\nImplicit session: session { "id" : UUID("c90c0469-9eb0-4583-bb9d-5af4b7a3f907") }\nMongoDB server version: 5.0.1\n\n~~略~~\n\n> \n> rs.initiate()\n{\n\t"info2" : "no configuration specified. Using a default configuration for the set",\n\t"me" : "edd2f8708eef:27017",\n\t"ok" : 1\n}\nmongo-set:SECONDARY>\nmongo-set:PRIMARY>\n')])])]),o("p",[e._v("まずはおまじないとして"),o("code",[e._v("rs.initiate()")]),e._v("を実行しておいてください。あとで紹介します。")]),e._v(" "),o("p",[e._v("とりあえず適当なデータを作成してみましょう。")]),e._v(" "),o("div",{staticClass:"language-terminal extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v('mongo-set:PRIMARY> use bootcamp-db\nswitched to db bootcamp-db\nmongo-set:PRIMARY> db.people.insert({name: "tanaka-san", age: 22})\nWriteResult({ "nInserted" : 1 })\nmongo-set:PRIMARY> db.people.insert({name: "sato-san", age: 25})\nWriteResult({ "nInserted" : 1 })\n\nmongo-set:PRIMARY> db.people.find()\n{ "_id" : ObjectId("61065f590ea234e44f402acf"), "name" : "tanaka-san", "age" : 22 }\n{ "_id" : ObjectId("61065f650ea234e44f402ad0"), "name" : "sato-san", "age" : 25 }\nmongo-set:PRIMARY>\n')])])]),o("p",[e._v("RDBMSにおける「テーブル」は、MongoDBでは「collection」と呼ばれます。ここでは"),o("code",[e._v("people")]),e._v("がcollectionです。")]),e._v(" "),o("div",{staticClass:"language-terminal extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("mongo-set:PRIMARY> show collections;\npeople\n")])])]),o("p",[e._v("MySQLなどのように事前に"),o("code",[e._v("CREATE TABLE...")]),e._v("などでテーブルを作成しなくても、勝手にcollectionが作成されています。\nMongoDBはスキーマレスなので、形式を問わずデータを保存できます。")]),e._v(" "),o("div",{staticClass:"language-terminal extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v('mongo-set:PRIMARY> db.people.insert({name: "watanabe-san", age: 23, address: "tokyo"})\nWriteResult({ "nInserted" : 1 })\nmongo-set:PRIMARY> db.people.insert({name: "fujimoto-san", age: 23, address: {post: "123-4567", city: "tokyo"}})\nWriteResult({ "nInserted" : 1 })\nmongo-set:PRIMARY> db.people.insert({name: "kawai-san", age: 30, address: {post: "123-9876", city: "tokyo"}})\nWriteResult({ "nInserted" : 1 })\n')])])]),o("p",[o("code",[e._v("db.people.find()")]),e._v(" してみてください。"),o("code",[e._v("people")]),e._v(" collectionの中にいろんな形式でデータが保存されています。")]),e._v(" "),o("h2",{attrs:{id:"検索と集計-aggregation"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#検索と集計-aggregation"}},[e._v("#")]),e._v(" 検索と集計(Aggregation)")]),e._v(" "),o("p",[e._v("単純な検索であれば"),o("code",[e._v("find()")]),e._v("で可能です。")]),e._v(" "),o("div",{staticClass:"language-terminal extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v('# 名前が`sato-san`なデータを検索\ndb.people.find({name: "sato-san"})\n\n# ageが23以上なデータを検索\ndb.people.find({age: {$gte: 23}})\n')])])]),o("p",[o("code",[e._v("$gte")]),e._v("は"),o("code",[e._v("greater than or equal")]),e._v("の略で「以上」のデータを検索します。例えばageが23「未満」なデータを検索する場合は"),o("code",[e._v("$lt")]),e._v("("),o("code",[e._v("lower than")]),e._v(")です。\n詳しくはこちら => "),o("a",{attrs:{href:"https://docs.mongodb.com/manual/reference/operator/query-comparison/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Comparison Query Operators"),o("OutboundLink")],1)]),e._v(" "),o("p",[e._v("ネストされたデータも検索できます。")]),e._v(" "),o("div",{staticClass:"language-terminal extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v('> db.people.find({"address.city": "tokyo"})\n')])])]),o("p",[e._v("さらに詳しい検索や集計をする場合、強力な "),o("a",{attrs:{href:"https://docs.mongodb.com/manual/core/aggregation-pipeline/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Aggregation"),o("OutboundLink")],1),e._v(" 機能が使えます。\n例えばMySQLの"),o("code",[e._v("group by")]),e._v("と同じことをするには以下のようにします。")]),e._v(" "),o("div",{staticClass:"language-terminal extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v('db.people.aggregate([\n  { $match: {"address.city": "tokyo"} },\n  { $group: {_id: "$address.city", age_sum: {$sum: "$age"}} }\n])\n')])])]),o("p",[e._v("ここでは"),o("code",[e._v("address.city")]),e._v("が"),o("code",[e._v("tokyo")]),e._v("になってる人のデータを集計し、"),o("code",[e._v("age")]),e._v("を合計して表示しています。")]),e._v(" "),o("p",[e._v("aggregationで使える機能はたくさんあるので、色々と試してみてください。=> "),o("a",{attrs:{href:"https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Aggregation Pipeline Stages"),o("OutboundLink")],1)]),e._v(" "),o("p",[e._v("例えば"),o("code",[e._v("$replaceRoot")]),e._v("というpipelineを使うとどうなるか試してみてください。他に個人的には "),o("a",{attrs:{href:"https://docs.mongodb.com/manual/reference/operator/aggregation/unwind/",target:"_blank",rel:"noopener noreferrer"}},[e._v("$unwind"),o("OutboundLink")],1),e._v(" をよく使ったりします。")]),e._v(" "),o("div",{staticClass:"language-terminal extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v('db.people.aggregate([\n  { $match: {"address.city": "tokyo"} },\n  { $replaceRoot: {newRoot: "$address"} }\n])\n')])])]),o("h2",{attrs:{id:"レプリカセット"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#レプリカセット"}},[e._v("#")]),e._v(" レプリカセット")]),e._v(" "),o("h3",{attrs:{id:"解説"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#解説"}},[e._v("#")]),e._v(" 解説")]),e._v(" "),o("p",[e._v("MongoDBでは "),o("a",{attrs:{href:"https://docs.mongodb.com/manual/replication/",target:"_blank",rel:"noopener noreferrer"}},[e._v("レプリカセット"),o("OutboundLink")],1),e._v(" と呼ばれる構成を奇数台（最小3台）で構成することができます。")]),e._v(" "),o("p",[o("img",{attrs:{src:a(395),alt:"replica-set-primary-with-two-secondaries"}})]),e._v(" "),o("p",[e._v("通常ではクライアントやアプリケーションは「Primary」になっているMongoDBに対してデータを更新します。すると更新されたデータは「Secondary」にもレプリケーションされます。\nそしてレプリカセットを構成しているMongoDBはお互いに投票処理を行い、その結果によって自動的にPrimary役が決定されます。")]),e._v(" "),o("p",[e._v("もしPrimaryが停止したりネットワーク的に分断された場合、残り2台のMongoDB同士で通信（画像のHeartbeat通信）ができる場合、2台による投票処理によって自動的に次のPrimaryが決定します。")]),e._v(" "),o("p",[o("img",{attrs:{src:a(396),alt:"replica-set-trigger-election"}})]),e._v(" "),o("p",[e._v("この時元々Primaryだったホストでは、他2台との通信ができなくなったことで自動的にPrimaryではなくなります（更新クエリを受け付けなくなる）。")]),e._v(" "),o("h3",{attrs:{id:"ハンズオン"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#ハンズオン"}},[e._v("#")]),e._v(" ハンズオン")]),e._v(" "),o("p",[e._v("実際にやってみましょう。"),o("code",[e._v("mongo-primary")]),e._v("でレプリカセットの設定をします。")]),e._v(" "),o("div",{staticClass:"language-terminal extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v('$ docker-compose exec mongo-arbiter mongo --port 27017 --host mongo-primary\nrs.reconfig( {\n   _id : "mongo-set",\n   members: [\n      { _id: 0, host: "mongo-primary:27017", priority: 2 },\n      { _id: 1, host: "mongo-secondary:27018", priority: 1 },\n      { _id: 2, host: "mongo-arbiter:27019", priority: 0 }\n   ]\n})\n')])])]),o("p",[e._v("すると残りの2台にも設定が反映され、レプリカセットが構築されます。"),o("code",[e._v("rs.status()")]),e._v("で設定状況を確認してみてください。")]),e._v(" "),o("div",{staticClass:"language-terminal extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("$ docker-compose exec mongo-arbiter mongo --port 27018 --host mongo-secondary\n\nmongo-set:SECONDARY> rs.status() # 設定確認\n")])])]),o("p",[o("code",[e._v('"ok" : 1')]),e._v("などでレプリカセットの正常性を確認できます。")]),e._v(" "),o("p",[e._v("以下のようにsecondaryにprimaryからデータがreplicateされていることが確認できます。")]),e._v(" "),o("div",{staticClass:"language-terminal extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v('mongo-set:SECONDARY> rs.secondaryOk()\nmongo-set:SECONDARY> use bootcamp-db\nswitched to db bootcamp-db\nmongo-set:SECONDARY> db.people.find()\n{ "_id" : ObjectId("610674ca6c750f55ca8b580d"), "name" : "tanaka-san", "age" : 22 }\n{ "_id" : ObjectId("610674ce6c750f55ca8b580e"), "name" : "sato-san", "age" : 25 }\n{ "_id" : ObjectId("610674d46c750f55ca8b580f"), "name" : "watanabe-san", "age" : 23, "address" : "tokyo" }\n{ "_id" : ObjectId("610674d86c750f55ca8b5810"), "name" : "fujimoto-san", "age" : 23, "address" : { "post" : "123-4567", "city" : "tokyo" } }\n{ "_id" : ObjectId("610674dc6c750f55ca8b5811"), "name" : "kawai-san", "age" : 30, "address" : { "post" : "123-9876", "city" : "tokyo" } }\n')])])]),o("p",[e._v("ここで例えばPrimaryのMongoDBを落としてみましょう")]),e._v(" "),o("div",{staticClass:"language-terminal extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("$ docker-compose stop mongo-primary\nStopping bootcamp-mongodb-sample_mongo-primary_1 ... done\n$ docker-compose ps\n                Name                              Command                State                    Ports\n-----------------------------------------------------------------------------------------------------------------------\nbootcamp-mongodb-sample_mongo-         docker-entrypoint.sh mongo ...   Up         27017/tcp, 0.0.0.0:27019->27019/tcp,\narbiter_1                                                                          :::27019->27019/tcp\nbootcamp-mongodb-sample_mongo-         docker-entrypoint.sh mongo ...   Exit 137\nprimary_1\nbootcamp-mongodb-sample_mongo-         docker-entrypoint.sh mongo ...   Up         27017/tcp, 0.0.0.0:27018->27018/tcp,\nsecondary_1                                                                        :::27018->27018/tcp\n")])])]),o("p",[e._v("するとSecondaryのプロンプトが"),o("code",[e._v("mongo-set:PRIMARY>")]),e._v("に変わるのが確認できます。")]),e._v(" "),o("div",{staticClass:"language-terminal extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("mongo-set:SECONDARY>\nmongo-set:PRIMARY>\nmongo-set:PRIMARY>\nmongo-set:PRIMARY>\n")])])]),o("p",[o("code",[e._v("rs.status()")]),e._v("をもう一度Secondaryで叩いてみてください。先ほどとどう変わったでしょうか。")]),e._v(" "),o("credit-footer")],1)}),[],!1,null,null,null);t.default=n.exports}}]);